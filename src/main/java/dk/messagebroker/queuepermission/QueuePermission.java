package dk.messagebroker.queuepermission;

import java.security.Permission;

/**
 * Абстрактный класс, описывающий доступ к очереди.
 * <br><br>
 * Входными параметрами класса являются имя ресурса, который пытается работать с очередью и список действий, которые ресурс
 * может выполнить над очередью. Какие будут использоваться типы ресурсов, как ресурсы подразумевают друг друга, какие типы
 * действий существуют - все задается в реализации.
 * <br><br>
 * Список действий - это строка. Как должна быть оформлена строка с действиями, какие должны быть разделители - все задается в реализации.
 * Полученная строка с действиями в конструктре преобразовывается во внутренний массив действий. Логика преобразования будет
 * задаваться в реализации метода normalizeAction(). Доступ к массиву будет осуществляется посредством метод getActionAsArray().
 */
public abstract class QueuePermission extends Permission {

    /**
     * Массив действий, формируемый на основе строки действий, получаемой в качестве параметра класса.
     * Например, "pusher, puller" должна будет преобразована в  {"pusher", "puller"}
     */
    private String[] actionAsArray;

    /**
     * Конструктор
     * @param resourceName Имя ресурса
     * @param actionAsString Строка со списками действий
     */
    public QueuePermission(String resourceName, String actionAsString) {
        super(resourceName);
        actionAsArray = normalizeAction(actionAsString);
    }

    /**
     * Получить массив со списком действий.
     * @return Массив строк с названиями действий
     */
    String[] getActionAsArray() {
        return actionAsArray;
    }

    /**
     * Нормализация передаваемого в класс списка действий в виде строки во внутренний массив строк с названиями действий.
     * Введение этого абстрактного метода вызвано необходимостью его использования уже в конструкторе этого класса.
     * @param actionAsString Список действий в виде строки; Какие разделители, какой формат этой строки - эти и другие вопросы относятся уже к реализации.
     * @return Список действий в виде массива строк.
     */
    abstract String[] normalizeAction(String actionAsString);

    /**
     * Подразумевает ли имя ресурса, передаваемое в метод, что речь идет о ресурсе, описанном в текущем объекте.
     * @param otherResourceName Имя ресурса для проверки
     * @return true/false (подразумевает/не подразумевает)
     */
    abstract boolean impliesResourceName(String otherResourceName);

    /**
     * Подрузумеваются ли действия передаваемые в метод, действиями прописанными в текущем объекте.
     * @param actions Список действий для проверки
     * @return true/false (подразумеваются/не подразумеваются)
     */
    abstract boolean impliesActions(String actions);

}
